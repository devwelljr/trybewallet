{"version":3,"sources":["actions/index.js","pages/Login.js","components/LabelValor.jsx","components/LabelTag.jsx","components/LabelMethod.jsx","components/LabelMoeda.jsx","components/LabelDescricao.jsx","components/FormWallet.jsx","servises/fetchExpense.js","components/TableExpend.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.js","index.js"],"names":["actionExpense","state","type","actionExpenseFail","Login","props","email","password","valid","handleChange","bind","validation","onSubmit","this","submitEmail","test","length","setState","target","name","value","id","className","data-testid","placeholder","onChange","minLength","to","disabled","onClick","React","Component","connect","dispatch","LabelValor","htmlFor","LabelTag","tag","LabelMethod","method","LabelMoeda","currency","moedas","role","map","m","i","key","LabelDescricao","description","FormWallet","submit","moeda","fetchExpense","a","fetch","requisition","json","exchangeRates","expenses","wallet","remove","head","scope","expense","ask","realName","split","newAsk","parseFloat","toFixed","coversao","Wallet","onSubmitExpense","totalExpenses","fetchMoedas","submitExpense","total","values","push","reduce","vt","vc","moedasKeys","Object","keys","filter","user","App","path","component","Boolean","window","location","hostname","match","inicialState","action","error","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.622be65b.chunk.js","sourcesContent":["export const EMAIL_SUBMIT = 'EMAIL_SUBMIT';\nexport const EXPENSE_SUBMIT = 'EXPENSE_SUBMIT';\nexport const EXPENSE_FAIL = 'EXPENSE_FAIL';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport const actionEmail = (state) => ({ type: EMAIL_SUBMIT, state });\n\nexport const actionExpense = (state) => ({ type: EXPENSE_SUBMIT, state });\nexport const actionExpenseFail = () => ({ type: EXPENSE_FAIL });\n\nexport const deleteExpense = (state) => ({ type: DELETE_EXPENSE, state });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { actionEmail } from '../actions';\nimport '../styles/login.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      valid: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.validation = this.validation.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit() {\n    const { email } = this.state;\n    const { submitEmail } = this.props;\n    submitEmail(email);\n  }\n\n  /* Referencia da validação com regextest usada: https://cursos.alura.com.br/forum/topico-como-validar-email-e-senha-em-javascript-80469  */\n  validation() {\n    const { email, password } = this.state;\n    const minLength = 5;\n    const Patt = /^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/;\n    const valid = !(Patt.test(email) && password.length > minLength);\n    this.setState({ valid });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => this.validation());\n  }\n\n  render() {\n    const { email, password, valid } = this.state;\n\n    return (\n      <div id=\"divLogin\">\n        <h1 className=\"fs-2 font-monospace\">TRYBEWALLET</h1>\n        <form id=\"formLogin\">\n          <input\n            data-testid=\"email-input\"\n            type=\"email\"\n            placeholder=\"Seu Email aqui\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n\n          <input\n            data-testid=\"password-input\"\n            type=\"password\"\n            placeholder=\"Sua senha aqui\"\n            name=\"password\"\n            minLength=\"6\"\n            value={ password }\n            onChange={ this.handleChange }\n          />\n          <Link to=\"/carteira\">\n            <button\n              type=\"button\"\n              id=\"butaoSubmit\"\n              className=\"btn btn-dark\"\n              disabled={ valid }\n              onClick={ this.onSubmit }\n            >\n              Entrar\n            </button>\n          </Link>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitEmail: (email) => dispatch(actionEmail(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  submitEmail: PropTypes.func,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LabelValor(props) {\n  const { value, handleChange } = props;\n  return (\n    <label htmlFor=\"valor\">\n      Valor:\n      <input\n        id=\"valor\"\n        type=\"text\"\n        name=\"value\"\n        value={ value }\n        onChange={ handleChange }\n      />\n    </label>\n  );\n}\n\nexport default LabelValor;\n\nLabelValor.propTypes = {\n  value: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LabelTag(props) {\n  const { tag, handleChange } = props;\n  return (\n    <label htmlFor=\"despesa\">\n      Tag:\n      <select\n        className=\"form-select\"\n        id=\"despesa\"\n        name=\"tag\"\n        value={ tag }\n        onChange={ handleChange }\n      >\n        <option value=\"Alimentação\">Alimentação</option>\n        <option value=\"Lazer\">Lazer</option>\n        <option value=\"Trabalho\">Trabalho</option>\n        <option value=\"Transporte\">Transporte</option>\n        <option value=\"Saude\">Saúde</option>\n      </select>\n    </label>\n  );\n}\n\nexport default LabelTag;\n\nLabelTag.propTypes = {\n  value: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LabelMethod(props) {\n  const { method, handleChange } = props;\n  return (\n    <label htmlFor=\"metodo\">\n      Método de pagamento:\n      <select\n        className=\"form-select\"\n        id=\"metodo\"\n        name=\"method\"\n        value={ method }\n        onChange={ handleChange }\n      >\n        <option value=\"Dinheiro\">Dinheiro</option>\n        <option value=\"Cartão de crédito\">Cartão de crédito</option>\n        <option value=\"Cartão de débito\">Cartão de débito</option>\n      </select>\n    </label>\n  );\n}\n\nexport default LabelMethod;\n\nLabelMethod.propTypes = {\n  method: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LabelMoeda(props) {\n  const { currency, moedas, handleChange } = props;\n  return (\n    <label htmlFor=\"Moeda\">\n      Moeda:\n      <select\n        className=\"form-select\"\n        role=\"combobox\"\n        id=\"Moeda\"\n        name=\"currency\"\n        value={ currency }\n        onChange={ handleChange }\n      >\n        {moedas.map((m, i) => <option key={ i } value={ m }>{ m }</option>)}\n      </select>\n    </label>\n  );\n}\n\nexport default LabelMoeda;\n\nLabelMoeda.propTypes = {\n  currency: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LabelDescricao(props) {\n  const { description, handleChange } = props;\n  return (\n    <label htmlFor=\"desc\">\n      Descrição:\n      <input\n        id=\"desc\"\n        type=\"text\"\n        name=\"description\"\n        value={ description }\n        onChange={ handleChange }\n      />\n    </label>\n  );\n}\n\nexport default LabelDescricao;\n\nLabelDescricao.propTypes = {\n  description: PropTypes.string,\n  handleChange: PropTypes.func,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LabelValor from './LabelValor';\nimport LabelTag from './LabelTag';\nimport LabelMethod from './LabelMethod';\nimport LabelMoeda from './LabelMoeda';\nimport LabelDescricao from './LabelDescricao';\n\nfunction FormWallet(props) {\n  const { currency,\n    moedas, value, description, tag, method, handleChange, submit } = props;\n  return (\n    <form className=\"form-inline\">\n      <LabelValor value={ value } handleChange={ handleChange } />\n      <LabelDescricao handleChange={ handleChange } description={ description } />\n      <LabelMoeda handleChange={ handleChange } moedas={ moedas } moeda={ currency } />\n      <LabelMethod handleChange={ handleChange } method={ method } />\n      <LabelTag handleChange={ handleChange } tag={ tag } />\n      <button type=\"button\" onClick={ submit }>Adicionar despesa</button>\n    </form>\n  );\n}\n\nexport default FormWallet;\n\nFormWallet.propTypes = {\n  currency: PropTypes.string,\n  description: PropTypes.string,\n}.isRequired;\n","import { actionExpense, actionExpenseFail } from '../actions/index';\n\nconst fetchExpense = (state) => async (dispatch) => {\n  const requisition = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const json = await requisition.json();\n  if (!json) return dispatch(actionExpenseFail);\n  dispatch(actionExpense({ ...state, exchangeRates: json }));\n};\n\nexport default fetchExpense;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpense } from '../actions';\n\nfunction TableExpend(props) {\n  const { expenses, remove } = props;\n  const tableThead = [\n    'Descrição', 'Tag', 'Método de pagamento', 'Valor', 'Moeda', 'Câmbio utilizado',\n    'Valor convertido', ' Moeda de conversão', 'Editar/Excluir',\n  ];\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          { tableThead.map((head) => <th scope=\"col\" key={ head }>{ head }</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        { expenses.map((expense) => {\n          const { description,\n            tag, method, value, currency, id, exchangeRates } = expense;\n          const { name, ask } = exchangeRates[currency];\n          const realName = name.split('/');\n          const newAsk = parseFloat(ask).toFixed(2);\n          const coversao = (value * ask).toFixed(2);\n          return (\n            <tr key={ id }>\n              <td>{ description }</td>\n              <td>{ tag }</td>\n              <td>{ method }</td>\n              <td>{ value }</td>\n              <td>{ realName[0] }</td>\n              <td>{ newAsk }</td>\n              <td>{ coversao }</td>\n              <td>Real</td>\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-dark\"\n                  onClick={ () => remove(id) }\n                  data-testid=\"delete-btn\"\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  remove: (id) => dispatch(deleteExpense(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableExpend);\n\nTableExpend.propTypes = {\n  expenses: PropTypes.array,\n}.isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport FormWallet from '../components/FormWallet';\nimport fetchExpense from '../servises/fetchExpense';\nimport TableExpend from '../components/TableExpend';\nimport '../styles/wallet.css';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      value: 0,\n      description: '',\n      currency: '',\n      moedas: [''],\n      method: '',\n      tag: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmitExpense = this.onSubmitExpense.bind(this);\n    this.totalExpenses = this.totalExpenses.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMoedas();\n  }\n\n  onSubmitExpense() {\n    const { submitExpense } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    submitExpense({ value, description, currency, method, tag });\n    this.setState({\n      value: 0,\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  totalExpenses() {\n    const { expenses } = this.props;\n    let total = 0;\n    const values = [];\n    if (expenses.length === 0) {\n      return total;\n    }\n\n    if (expenses.length === 1) {\n      total = expenses[0].exchangeRates[expenses[0].currency].ask * expenses[0].value;\n    }\n\n    if (expenses.length > 1) {\n      expenses.map((expense) => values.push(\n        parseFloat(\n          expense.exchangeRates[expense.currency].ask * expense.value,\n        ),\n      ));\n      total = values.reduce((vt, vc) => vt + vc);\n    }\n    return total.toFixed(2);\n  }\n\n  async fetchMoedas() {\n    const fetchMoedas = await fetch(\n      'https://economia.awesomeapi.com.br/json/all',\n    );\n    const json = await fetchMoedas.json();\n    const moedasKeys = Object.keys(json);\n    const moedas = moedasKeys.filter((moeda) => moeda !== 'USDT');\n    this.setState({ moedas });\n  }\n\n  render() {\n    const { email } = this.props;\n    const { currency, moedas, value, description, tag, method } = this.state;\n    return (\n      <div>\n        <header className=\"d-flex flex-row bd-highlight separate\">\n          <h3 className=\"separate\" data-testid=\"email-field\">\n            {email}\n          </h3>\n          <h3 className=\"separate\" data-testid=\"total-field\">\n            {this.totalExpenses()}\n          </h3>\n          <h3 className=\"separate\" data-testid=\"header-currency-field\">\n            BRL\n          </h3>\n        </header>\n        <FormWallet\n          moedas={ moedas }\n          handleChange={ this.handleChange }\n          value={ value }\n          description={ description }\n          currency={ currency }\n          method={ method }\n          tag={ tag }\n          submit={ this.onSubmitExpense }\n        />\n        <TableExpend />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user, wallet }) => ({\n  email: user.email,\n  expenses: wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitExpense: (state) => dispatch(fetchExpense(state)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n\nWallet.propTypes = {\n  email: PropTypes.string,\n}.isRequired;\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/carteira\" component={ Wallet } />\n      <Route path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { EMAIL_SUBMIT } from '../actions';\n\nconst inicialState = {\n  email: '',\n};\n\nconst user = (state = inicialState, action) => {\n  switch (action.type) {\n  case EMAIL_SUBMIT:\n    return ({ email: action.state });\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { EXPENSE_SUBMIT, EXPENSE_FAIL, DELETE_EXPENSE } from '../actions';\n\nconst inicialState = {\n  expenses: [],\n};\n\nconst wallet = (state = inicialState, action) => {\n  switch (action.type) {\n  case EXPENSE_SUBMIT:\n    return ({\n      ...state,\n      expenses: [\n        ...state.expenses,\n        { id: state.expenses.length, ...action.state },\n      ],\n    });\n\n  case EXPENSE_FAIL:\n    return { ...state, error: 'Ocorreu um erro' };\n\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter(({ id }) => id !== action.state),\n    };\n  /* Referencia do DELETE_EXPENSE: https://stackoverflow.com/questions/57519905/how-delete-item-from-redux-state */\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}